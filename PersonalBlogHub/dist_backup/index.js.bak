// server/index.ts
import express2 from "express";

// server/routes.ts
import { createServer } from "http";

// server/storage.ts
import { v2 as cloudinary } from "cloudinary";
import mongoose from "mongoose";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import slugify from "slugify";
cloudinary.config({
  cloud_name: "dyoo3p50k",
  api_key: "549325776547827",
  api_secret: "Zq6PZ56pNhCmssVPuMukPwzyUr8"
});
var connectDB = async () => {
  try {
    await mongoose.connect("mongodb+srv://squizzy143:8Y8RtvZlsI4qr49C@nikhil2.gt73u.mongodb.net/?retryWrites=true&w=majority&appName=nikhil2");
    console.log("MongoDB connected");
  } catch (error) {
    console.error("MongoDB connection error:", error);
    process.exit(1);
  }
};
var UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true }
});
var PostSchema = new mongoose.Schema({
  title: { type: String, required: true },
  slug: { type: String, required: true, unique: true },
  excerpt: { type: String, required: true },
  content: { type: Object, required: true },
  featuredImage: { type: String },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});
var MessageSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true },
  subject: { type: String, required: true },
  message: { type: String, required: true },
  createdAt: { type: Date, default: Date.now }
});
var UserModel = mongoose.models.User || mongoose.model("User", UserSchema);
var PostModel = mongoose.models.Post || mongoose.model("Post", PostSchema);
var MessageModel = mongoose.models.Message || mongoose.model("Message", MessageSchema);
var MongoDBStorage = class {
  constructor() {
    connectDB();
    this.initializeAdmin();
  }
  // Initialize admin user if doesn't exist
  async initializeAdmin() {
    try {
      const adminExists = await UserModel.findOne({ email: "tejash@gmail.com" });
      if (!adminExists) {
        const hashedPassword = await bcrypt.hash("tejash@123", 10);
        await UserModel.create({
          username: "tejash",
          email: "tejash@gmail.com",
          password: hashedPassword
        });
        console.log("Admin user created");
      }
    } catch (error) {
      console.error("Error initializing admin:", error);
    }
  }
  // User operations
  async createUser(userData) {
    const hashedPassword = await bcrypt.hash(userData.password, 10);
    const user = await UserModel.create({
      ...userData,
      password: hashedPassword
    });
    return this.mapUserToType(user);
  }
  async getUserByEmail(email) {
    const user = await UserModel.findOne({ email });
    return user ? this.mapUserToType(user) : null;
  }
  async login(credentials) {
    const user = await UserModel.findOne({ email: credentials.email });
    if (!user) return null;
    const isPasswordValid = await bcrypt.compare(credentials.password, user.password);
    if (!isPasswordValid) return null;
    const token = jwt.sign(
      { id: user._id, email: user.email },
      process.env.SECRET_KEY_ACCESS_TOKEN,
      { expiresIn: "7d" }
    );
    return { user: this.mapUserToType(user), token };
  }
  async validateToken(token) {
    try {
      const decoded = jwt.verify(token, process.env.SECRET_KEY_ACCESS_TOKEN);
      const user = await UserModel.findById(decoded.id);
      return user ? this.mapUserToType(user) : null;
    } catch (error) {
      return null;
    }
  }
  // Post operations
  async createPost(postData) {
    let slug = slugify(postData.title, { lower: true });
    const existingPost = await PostModel.findOne({ slug });
    if (existingPost) {
      slug = `${slug}-${Math.random().toString(36).substring(2, 7)}`;
    }
    const post = await PostModel.create({
      ...postData,
      slug
    });
    return this.mapPostToType(post);
  }
  async getAllPosts() {
    const posts2 = await PostModel.find().sort({ createdAt: -1 });
    return posts2.map((post) => this.mapPostToType(post));
  }
  async getPostBySlug(slug) {
    const post = await PostModel.findOne({ slug });
    return post ? this.mapPostToType(post) : null;
  }
  async getPostById(id) {
    try {
      console.log("Getting post by ID:", id);
      const post = await PostModel.findById(id);
      return post ? this.mapPostToType(post) : null;
    } catch (error) {
      console.error("Error getting post by ID:", error);
      return null;
    }
  }
  async updatePost(id, postData) {
    try {
      console.log("Updating post with ID:", id, "Data:", postData);
      const post = await PostModel.findByIdAndUpdate(
        id,
        { ...postData, updatedAt: /* @__PURE__ */ new Date() },
        { new: true }
      );
      console.log("Update result:", post);
      return post ? this.mapPostToType(post) : null;
    } catch (error) {
      console.error("Error updating post:", error);
      return null;
    }
  }
  async deletePost(id) {
    try {
      console.log("Storage: Deleting post with ID:", id);
      const result = await PostModel.findByIdAndDelete(id);
      console.log("Delete result:", result);
      return !!result;
    } catch (error) {
      console.error("Error deleting post:", error);
      return false;
    }
  }
  // Image upload
  async uploadImage(file) {
    try {
      const result = await new Promise((resolve, reject) => {
        cloudinary.uploader.upload_stream({ folder: "blog" }, (error, result2) => {
          if (error) reject(error);
          else resolve(result2);
        }).end(file.buffer);
      });
      return result.secure_url;
    } catch (error) {
      console.error("Error uploading image:", error);
      throw new Error("Failed to upload image");
    }
  }
  // Contact messages
  async saveContactMessage(messageData) {
    const message = await MessageModel.create(messageData);
    return this.mapMessageToType(message);
  }
  // Helper methods to map MongoDB documents to our types
  mapUserToType(user) {
    return {
      id: user._id,
      username: user.username,
      email: user.email,
      password: user.password
    };
  }
  mapPostToType(post) {
    return {
      id: post._id.toString(),
      // Convert MongoDB ObjectId to string for consistent handling
      title: post.title,
      slug: post.slug,
      excerpt: post.excerpt,
      content: post.content,
      featuredImage: post.featuredImage || null,
      // Ensure featuredImage is never undefined
      createdAt: post.createdAt,
      updatedAt: post.updatedAt
    };
  }
  mapMessageToType(message) {
    return {
      id: message._id,
      name: message.name,
      email: message.email,
      subject: message.subject,
      message: message.message,
      createdAt: message.createdAt
    };
  }
};
var MemStorage = class {
  users;
  posts;
  messages;
  currentUserId;
  currentPostId;
  currentMessageId;
  constructor() {
    this.users = /* @__PURE__ */ new Map();
    this.posts = /* @__PURE__ */ new Map();
    this.messages = /* @__PURE__ */ new Map();
    this.currentUserId = 1;
    this.currentPostId = 1;
    this.currentMessageId = 1;
    const adminUser = {
      id: this.currentUserId++,
      username: "tejash",
      email: "tejash@gmail.com",
      password: bcrypt.hashSync("tejash@123", 10)
    };
    this.users.set(adminUser.id, adminUser);
    const samplePosts = [
      {
        id: this.currentPostId++,
        title: "Getting Started with Web Development",
        slug: "getting-started-with-web-development",
        excerpt: "A comprehensive guide for beginners who want to start their journey in web development. Learn about HTML, CSS, and JavaScript fundamentals.",
        content: { type: "doc", content: [{ type: "paragraph", content: [{ type: "text", text: "Sample content for the first blog post." }] }] },
        featuredImage: "https://images.unsplash.com/photo-1486312338219-ce68d2c6f44d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=350&q=80",
        createdAt: /* @__PURE__ */ new Date("2023-06-12"),
        updatedAt: /* @__PURE__ */ new Date("2023-06-12")
      },
      {
        id: this.currentPostId++,
        title: "10 Tips for Better JavaScript Code",
        slug: "10-tips-for-better-javascript-code",
        excerpt: "Improve your JavaScript skills with these essential tips that will help you write cleaner, more efficient, and maintainable code for your projects.",
        content: { type: "doc", content: [{ type: "paragraph", content: [{ type: "text", text: "Sample content for the second blog post." }] }] },
        featuredImage: "https://images.unsplash.com/photo-1555099962-4199c345e5dd?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=350&q=80",
        createdAt: /* @__PURE__ */ new Date("2023-05-28"),
        updatedAt: /* @__PURE__ */ new Date("2023-05-28")
      }
    ];
    samplePosts.forEach((post) => this.posts.set(post.id, post));
  }
  // User operations
  async createUser(userData) {
    const hashedPassword = await bcrypt.hash(userData.password, 10);
    const id = this.currentUserId++;
    const user = { ...userData, id, password: hashedPassword };
    this.users.set(id, user);
    return user;
  }
  async getUserByEmail(email) {
    const user = Array.from(this.users.values()).find((user2) => user2.email === email);
    return user || null;
  }
  async login(credentials) {
    const user = await this.getUserByEmail(credentials.email);
    if (!user) return null;
    const isPasswordValid = await bcrypt.compare(credentials.password, user.password);
    if (!isPasswordValid) return null;
    const token = jwt.sign(
      { id: user.id, email: user.email },
      process.env.SECRET_KEY_ACCESS_TOKEN || "dev-secret",
      { expiresIn: "7d" }
    );
    return { user, token };
  }
  async validateToken(token) {
    try {
      const decoded = jwt.verify(token, process.env.SECRET_KEY_ACCESS_TOKEN || "dev-secret");
      return this.users.get(decoded.id) || null;
    } catch (error) {
      return null;
    }
  }
  // Post operations
  async createPost(postData) {
    const id = this.currentPostId++;
    const now = /* @__PURE__ */ new Date();
    let slug = slugify(postData.title, { lower: true });
    if (Array.from(this.posts.values()).some((post2) => post2.slug === slug)) {
      slug = `${slug}-${Math.random().toString(36).substring(2, 7)}`;
    }
    const post = {
      ...postData,
      id,
      slug,
      createdAt: now,
      updatedAt: now
    };
    this.posts.set(id, post);
    return post;
  }
  async getAllPosts() {
    return Array.from(this.posts.values()).sort(
      (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    );
  }
  async getPostBySlug(slug) {
    const post = Array.from(this.posts.values()).find((post2) => post2.slug === slug);
    return post || null;
  }
  async getPostById(id) {
    return this.posts.get(id) || null;
  }
  async updatePost(id, postData) {
    const post = this.posts.get(id);
    if (!post) return null;
    const updatedPost = {
      ...post,
      ...postData,
      updatedAt: /* @__PURE__ */ new Date()
    };
    this.posts.set(id, updatedPost);
    return updatedPost;
  }
  async deletePost(id) {
    return this.posts.delete(id);
  }
  // Mock image upload for development
  async uploadImage(file) {
    return "https://images.unsplash.com/photo-1486312338219-ce68d2c6f44d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=350&q=80";
  }
  // Contact messages
  async saveContactMessage(messageData) {
    const id = this.currentMessageId++;
    const message = {
      ...messageData,
      id,
      createdAt: /* @__PURE__ */ new Date()
    };
    this.messages.set(id, message);
    return message;
  }
};
var storage = process.env.MONGODB_URI ? new MongoDBStorage() : new MemStorage();

// shared/schema.ts
import { pgTable, text, serial, timestamp, varchar, jsonb } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
var users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  email: text("email").notNull().unique(),
  password: text("password").notNull()
});
var insertUserSchema = createInsertSchema(users).pick({
  username: true,
  email: true,
  password: true
});
var posts = pgTable("posts", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  slug: text("slug").notNull().unique(),
  excerpt: text("excerpt").notNull(),
  content: jsonb("content").notNull(),
  featuredImage: text("featured_image"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull()
});
var insertPostSchema = createInsertSchema(posts).pick({
  title: true,
  slug: true,
  excerpt: true,
  content: true,
  featuredImage: true
});
var loginSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8)
});
var messages = pgTable("messages", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 100 }).notNull(),
  email: varchar("email", { length: 100 }).notNull(),
  subject: varchar("subject", { length: 200 }).notNull(),
  message: text("message").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull()
});
var insertMessageSchema = createInsertSchema(messages).pick({
  name: true,
  email: true,
  subject: true,
  message: true
});

// server/routes.ts
import multer from "multer";
var upload = multer({ storage: multer.memoryStorage() });
var authenticate = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) {
      return res.status(401).json({ message: "Authentication required" });
    }
    const user = await storage.validateToken(token);
    if (!user) {
      return res.status(401).json({ message: "Invalid token" });
    }
    req.user = user;
    next();
  } catch (error) {
    return res.status(401).json({ message: "Authentication failed" });
  }
};
async function registerRoutes(app2) {
  app2.post("/api/auth/login", async (req, res) => {
    try {
      const validatedData = loginSchema.parse(req.body);
      const result = await storage.login(validatedData);
      if (!result) {
        return res.status(401).json({ message: "Invalid credentials" });
      }
      const { user, token } = result;
      const { password, ...userWithoutPassword } = user;
      res.json({
        user: userWithoutPassword,
        token
      });
    } catch (error) {
      console.error("Login error:", error);
      res.status(400).json({ message: "Invalid login request" });
    }
  });
  app2.get("/api/auth/user", authenticate, (req, res) => {
    const { password, ...userWithoutPassword } = req.user;
    res.json({ user: userWithoutPassword });
  });
  app2.get("/api/posts", async (_req, res) => {
    try {
      const posts2 = await storage.getAllPosts();
      res.json(posts2);
    } catch (error) {
      console.error("Error fetching posts:", error);
      res.status(500).json({ message: "Error fetching posts" });
    }
  });
  app2.get("/api/posts/:slug", async (req, res) => {
    try {
      const isId = !isNaN(Number(req.params.slug));
      let post;
      if (isId) {
        post = await storage.getPostById(Number(req.params.slug));
      } else {
        post = await storage.getPostBySlug(req.params.slug);
      }
      if (!post) {
        return res.status(404).json({ message: "Post not found" });
      }
      res.json(post);
    } catch (error) {
      console.error("Error fetching post:", error);
      res.status(500).json({ message: "Error fetching post" });
    }
  });
  app2.post("/api/posts", authenticate, async (req, res) => {
    try {
      const validatedData = insertPostSchema.parse(req.body);
      const post = await storage.createPost(validatedData);
      res.status(201).json(post);
    } catch (error) {
      console.error("Error creating post:", error);
      res.status(400).json({ message: "Invalid post data" });
    }
  });
  app2.put("/api/posts/:id", authenticate, async (req, res) => {
    try {
      console.log("Updating post from API with ID:", req.params.id);
      console.log("Update payload:", req.body);
      const validatedData = insertPostSchema.partial().parse(req.body);
      const post = await storage.updatePost(req.params.id, validatedData);
      if (!post) {
        console.log("Post not found for update");
        return res.status(404).json({ message: "Post not found" });
      }
      console.log("Post updated successfully");
      res.json(post);
    } catch (error) {
      console.error("Error updating post:", error);
      res.status(400).json({ message: "Invalid post data" });
    }
  });
  app2.delete("/api/posts/:id", authenticate, async (req, res) => {
    try {
      console.log("Deleting post with ID:", req.params.id);
      const postId = req.params.id;
      const result = await storage.deletePost(postId);
      if (!result) {
        console.log("Post not found for deletion");
        return res.status(404).json({ message: "Post not found" });
      }
      console.log("Post successfully deleted");
      res.json({ success: true });
    } catch (error) {
      console.error("Error deleting post:", error);
      res.status(500).json({ message: "Error deleting post" });
    }
  });
  app2.post("/api/upload", authenticate, upload.single("image"), async (req, res) => {
    try {
      if (!req.file) {
        return res.status(400).json({ message: "No image file provided" });
      }
      const imageUrl = await storage.uploadImage(req.file);
      res.json({ url: imageUrl });
    } catch (error) {
      console.error("Error uploading image:", error);
      res.status(500).json({ message: "Error uploading image" });
    }
  });
  app2.post("/api/contact", async (req, res) => {
    try {
      const validatedData = insertMessageSchema.parse(req.body);
      const message = await storage.saveContactMessage(validatedData);
      res.status(201).json({ success: true, message });
    } catch (error) {
      console.error("Error saving contact message:", error);
      res.status(400).json({ message: "Invalid message data" });
    }
  });
  const httpServer = createServer(app2);
  return httpServer;
}

// server/vite.ts
import express from "express";
import fs from "fs";
import path2 from "path";
import { createServer as createViteServer, createLogger } from "vite";

// vite.config.ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...process.env.NODE_ENV !== "production" && process.env.REPL_ID !== void 0 ? [
      await import("@replit/vite-plugin-cartographer").then(
        (m) => m.cartographer()
      )
    ] : []
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets")
    }
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true
  }
});

// server/vite.ts
import { nanoid } from "nanoid";
var viteLogger = createLogger();
function log(message, source = "express") {
  const formattedTime = (/* @__PURE__ */ new Date()).toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true
  });
  console.log(`${formattedTime} [${source}] ${message}`);
}
async function setupVite(app2, server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true
  };
  const vite = await createViteServer({
    ...vite_config_default,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      }
    },
    server: serverOptions,
    appType: "custom"
  });
  app2.use(vite.middlewares);
  app2.use("*", async (req, res, next) => {
    const url = req.originalUrl;
    try {
      const clientTemplate = path2.resolve(
        import.meta.dirname,
        "..",
        "client",
        "index.html"
      );
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e);
      next(e);
    }
  });
}
function serveStatic(app2) {
  const distPath = path2.resolve(import.meta.dirname, "public");
  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`
    );
  }
  app2.use(express.static(distPath));
  app2.use("*", (_req, res) => {
    res.sendFile(path2.resolve(distPath, "index.html"));
  });
}

// server/index.ts
var app = express2();
app.use(express2.json({ limit: "50mb" }));
app.use(express2.urlencoded({ limit: "50mb", extended: true }));
app.use((req, res, next) => {
  const start = Date.now();
  const path3 = req.path;
  let capturedJsonResponse = void 0;
  const originalResJson = res.json;
  res.json = function(bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path3.startsWith("/api")) {
      let logLine = `${req.method} ${path3} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }
      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "\u2026";
      }
      log(logLine);
    }
  });
  next();
});
(async () => {
  const server = await registerRoutes(app);
  app.use((err, _req, res, _next) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";
    res.status(status).json({ message });
    throw err;
  });
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }
  const port = process.env.PORT || 5e3;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true
  }, () => {
    log(`serving on port ${port}`);
  });
})();
